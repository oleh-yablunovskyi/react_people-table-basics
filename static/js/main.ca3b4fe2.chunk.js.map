{"version":3,"sources":["components/NavbarLink/NavbarLink.tsx","components/Navbar/Navbar.tsx","App.tsx","api.ts","components/PersonLink/PersonLink.tsx","components/PersonItem/PersonItem.tsx","helpers/helpers.ts","components/PeopleTable.tsx/PeopleTable.tsx","components/Loader/Loader.tsx","pages/PeoplePage.tsx","pages/HomePage.tsx","pages/NotFoundPage.tsx","index.tsx"],"names":["NavbarLink","to","text","className","isActive","cn","Navbar","React","memo","role","App","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","isPersonExisting","slug","sex","name","PersonItem","selectedPersonSlug","personMother","personFather","isSelected","born","died","motherName","fatherName","getParent","people","parentName","find","PeopleTable","map","Loader","PeoplePage","useState","setPeople","isLoading","setIsLoading","isLoadError","setIsLoadError","useParams","useEffect","catch","finally","length","HomePage","NotFoundPage","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"kRASaA,EAA8B,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACzC,cAAC,IAAD,CACED,GAAIA,EACJE,UAAW,gBAAGC,EAAH,EAAGA,SAAH,OAAkBC,IAC3B,cACA,CAAE,8BAA+BD,GAFxB,EAFb,SAOGF,GARsC,ECN9BI,EAASC,IAAMC,MAC1B,WACE,OACE,qBACE,UAAQ,MACRL,UAAU,iCACVM,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKN,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,EAAD,CAAYF,GAAG,IAAIC,KAAK,SACxB,cAAC,EAAD,CAAYD,GAAG,UAAUC,KAAK,iBAKvC,IChBUQ,EAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAACJ,EAAD,IAEA,sBAAMH,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UAKT,E,OCPM,SAASQ,IAEd,OANYC,EAMA,IALL,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,KAMvBI,MAAK,kBAAMC,MATA,oEASN,IACLD,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,IARlB,IAAcP,CASb,CCLM,IAAMQ,EAA8Bb,IAAMC,MAC/C,YAAiB,IAAda,EAAa,EAAbA,OACKC,EAAqC,kBAAXD,EAEhC,OACE,mCACGC,EAEG,cAAC,IAAD,CACErB,GAAE,aAAQoB,EAAOE,MACjBpB,UAAWE,IAAG,OAAQ,CACpB,kBAAkC,MAAfgB,EAAOG,MAH9B,SAMGH,EAAOI,OARG,UAYVJ,IAIZ,ICnBUK,EAA8BnB,IAAMC,MAC/C,YAKO,IAJLa,EAII,EAJJA,OACAM,EAGI,EAHJA,mBACAC,EAEI,EAFJA,aACAC,EACI,EADJA,aAEMC,EAAcT,EAAOE,OAASI,EAEpC,OACE,qBACE,UAAQ,SACRxB,UAAWE,IAAG,CACZ,yBAA0ByB,IAH9B,UAME,6BACE,cAACV,EAAD,CAAYC,OAAQA,MAGtB,6BAAKA,EAAOG,MACZ,6BAAKH,EAAOU,OACZ,6BAAKV,EAAOW,OAEZ,6BACGX,EAAOY,WAEJ,cAACb,EAAD,CAAYC,OAAQO,IACpB,MAEN,6BACGP,EAAOa,WAEJ,cAACd,EAAD,CAAYC,OAAQQ,IACpB,QAIX,IChDUM,EAAY,SACvBC,EACAC,GAEA,OAAmB,OAAfA,EACK,GAGFD,EAAOE,MAAK,SAAAjB,GAAM,OAAIA,EAAOI,OAASY,CAApB,KAAmCA,CAC7D,ECDYE,EAA+BhC,IAAMC,MAChD,YAAqC,IAAlC4B,EAAiC,EAAjCA,OAAQT,EAAyB,EAAzBA,mBACT,OACE,wBACE,UAAQ,cACRxB,UAAU,uDAFZ,UAIE,gCACE,+BACE,sCACA,qCACA,sCACA,sCACA,wCACA,6CAIJ,gCACGiC,EAAOI,KAAI,SAAAnB,GAAM,OAChB,cAACK,EAAD,CAEEL,OAAQA,EACRM,mBAAoBA,EACpBC,aAAcO,EAAUC,EAAQf,EAAOY,YACvCJ,aAAcM,EAAUC,EAAQf,EAAOa,aAJlCb,EAAOE,KAFE,QAYzB,ICvCUkB,G,MAAS,kBACpB,qBAAKtC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCKTuC,EAAa,WACxB,MAA4BC,mBAAmB,IAA/C,mBAAOP,EAAP,KAAeQ,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAAsCH,oBAAS,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KAEA,EAAsBC,cAAd1B,YAAR,MAAe,GAAf,EASA,OAPA2B,qBAAU,WACRvC,IACGK,KAAK4B,GACLO,OAAM,kBAAMH,GAAe,EAArB,IACNI,SAAQ,kBAAMN,GAAa,EAAnB,GACZ,GAAE,IAGD,qCACE,oBAAI3C,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,sBAAf,UACG0C,EAEG,cAAC,EAAD,IAGA,cAACN,EAAD,CACEH,OAAQA,EACRT,mBAAoBJ,IAIzBwB,GACC,mBAAG,UAAQ,qBAAqB5C,UAAU,kBAA1C,mCAKA0C,IAAcT,EAAOiB,QACrB,mBAAG,UAAQ,qBAAqBlD,UAAU,kBAA1C,SACE,mBAAG,UAAQ,kBAAX,wDASb,ECrDYmD,EAAqB/C,IAAMC,MAAK,kBAC3C,oBAAIL,UAAU,QAAd,sBAD2C,ICAhCoD,EAAyBhD,IAAMC,MAAK,kBAC/C,oBAAIL,UAAU,QAAd,2BAD+C,ICWjDqD,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAACP,EAAD,MACtB,cAAC,IAAD,CAAOM,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAU5D,GAAG,IAAI8D,SAAO,MAErD,eAAC,IAAD,CAAOH,KAAK,SAAZ,UACE,cAAC,IAAD,CAAOE,OAAK,EAACD,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,SAG/B,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAACN,EAAD,a","file":"static/js/main.ca3b4fe2.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport cn from 'classnames';\n\nexport type Props = {\n  to: string;\n  text: string;\n};\n\nexport const NavbarLink: React.FC<Props> = ({ to, text }) => (\n  <NavLink\n    to={to}\n    className={({ isActive }) => cn(\n      'navbar-item',\n      { 'has-background-grey-lighter': isActive },\n    )}\n  >\n    {text}\n  </NavLink>\n);\n","import React from 'react';\nimport { NavbarLink } from '../NavbarLink/NavbarLink';\n\nexport const Navbar = React.memo(\n  () => {\n    return (\n      <nav\n        data-cy=\"nav\"\n        className=\"navbar is-fixed-top has-shadow\"\n        role=\"navigation\"\n        aria-label=\"main navigation\"\n      >\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <NavbarLink to=\"/\" text=\"Home\" />\n            <NavbarLink to=\"/people\" text=\"People\" />\n          </div>\n        </div>\n      </nav>\n    );\n  },\n);\n","import './App.scss';\nimport { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar/Navbar';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <main className=\"section\">\n        <div className=\"container\">\n          <Outlet />\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person | string;\n};\n\nexport const PersonLink: React.FC<Props> = React.memo(\n  ({ person }) => {\n    const isPersonExisting = typeof person !== 'string';\n\n    return (\n      <>\n        {isPersonExisting\n          ? (\n            <Link\n              to={`../${person.slug}`}\n              className={cn('todo', {\n                'has-text-danger': person.sex === 'f',\n              })}\n            >\n              {person.name}\n            </Link>\n          )\n          : (\n            `${person}`\n          )}\n      </>\n    );\n  },\n);\n","import cn from 'classnames';\nimport React from 'react';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink/PersonLink';\n\ntype Props = {\n  person: Person;\n  selectedPersonSlug: string;\n  personMother: Person | string;\n  personFather: Person | string;\n};\n\nexport const PersonItem: React.FC<Props> = React.memo(\n  ({\n    person,\n    selectedPersonSlug,\n    personMother,\n    personFather,\n  }) => {\n    const isSelected = (person.slug === selectedPersonSlug);\n\n    return (\n      <tr\n        data-cy=\"person\"\n        className={cn({\n          'has-background-warning': isSelected,\n        })}\n      >\n        <td>\n          <PersonLink person={person} />\n        </td>\n\n        <td>{person.sex}</td>\n        <td>{person.born}</td>\n        <td>{person.died}</td>\n\n        <td>\n          {person.motherName\n            // ? `${person.motherName}`\n            ? <PersonLink person={personMother} />\n            : '-'}\n        </td>\n        <td>\n          {person.fatherName\n            // ? `${person.fatherName}`\n            ? <PersonLink person={personFather} />\n            : '-'}\n        </td>\n      </tr>\n    );\n  },\n);\n","import { Person } from '../types';\n\nexport const getParent = (\n  people: Person[],\n  parentName: string | null,\n) => {\n  if (parentName === null) {\n    return '';\n  }\n\n  return people.find(person => person.name === parentName) || parentName;\n};\n","import React from 'react';\nimport { Person } from '../../types';\nimport { PersonItem } from '../PersonItem/PersonItem';\nimport { getParent } from '../../helpers/helpers';\n\ntype Props = {\n  people: Person[];\n  selectedPersonSlug: string\n};\n\nexport const PeopleTable: React.FC<Props> = React.memo(\n  ({ people, selectedPersonSlug }) => {\n    return (\n      <table\n        data-cy=\"peopleTable\"\n        className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n      >\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Sex</th>\n            <th>Born</th>\n            <th>Died</th>\n            <th>Mother</th>\n            <th>Father</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {people.map(person => (\n            <PersonItem\n              key={person.slug}\n              person={person}\n              selectedPersonSlug={selectedPersonSlug}\n              personMother={getParent(people, person.motherName)}\n              personFather={getParent(people, person.fatherName)}\n            />\n          ))}\n        </tbody>\n      </table>\n    );\n  },\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { PeopleTable } from '../components/PeopleTable.tsx/PeopleTable';\nimport { Loader } from '../components/Loader';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadError, setIsLoadError] = useState(false);\n\n  const { slug = '' } = useParams();\n\n  useEffect(() => {\n    getPeople()\n      .then(setPeople)\n      .catch(() => setIsLoadError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading\n            ? (\n              <Loader />\n            )\n            : (\n              <PeopleTable\n                people={people}\n                selectedPersonSlug={slug}\n              />\n            )}\n\n          {isLoadError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {!isLoading && !people.length && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              <p data-cy=\"noPeopleMessage\">\n                There are no people on the server\n              </p>\n            </p>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nexport const HomePage: React.FC = React.memo(() => (\n  <h1 className=\"title\">Home Page</h1>\n));\n","import React from 'react';\n\nexport const NotFoundPage: React.FC = React.memo(() => (\n  <h1 className=\"title\">Page not found</h1>\n));\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter, Navigate, Route, Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeoplePage } from './pages/PeoplePage';\nimport { HomePage } from './pages/HomePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <HashRouter>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route index element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Route>\n\n      </Routes>\n    </HashRouter>,\n  );\n"],"sourceRoot":""}